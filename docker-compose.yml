services:

  generate-realm:
    build:
      context: .
      dockerfile: ./scripts/Dockerfile
    container_name: generate-realm
    volumes:
      - ./realms:/output
      - ./data:/data
    entrypoint: ["bash", "/scripts/generate-realm.sh"]
    restart: "no"

  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_DB: z
      POSTGRES_USER: z
      POSTGRES_PASSWORD: pp18
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U z > /dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - cdr-network
    restart: always

  mysql:
    image: mysql:8
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: cdrdb
      MYSQL_USER: backend
      MYSQL_PASSWORD: backendpass
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - cdr-network
    restart: always

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
    ports:
      - "2181:2181"
    networks:
      - cdr-network

  kafka:
    image: bitnami/kafka:3.6.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_KRAFT_MODE: "no"
      KAFKA_CREATE_TOPICS: "cdr-topic:1:1"
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 10s
      retries: 5
    networks:
      - cdr-network

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.2
    container_name: keycloak
    command: start-dev --import-realm
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HTTP_PORT: 8081
      KEYCLOAK_THEME: cdr-pastel
      QUARKUS_TRANSACTION_MANAGER_ENABLE_RECOVERY: true
    ports:
      - "8081:8081"
    volumes:
      - ./realms:/opt/keycloak/data/import
      - ./themes:/opt/keycloak/themes
    restart: always
    networks:
      - cdr-network
    depends_on:
      - generate-realm

  ms-backend:
    build:
      context: .
      dockerfile: ./ms-backend/Dockerfile
    container_name: ms-backend
    ports:
      - "8082:8080"
    volumes:
      - ./ms-backend/src:/app/src
      - ./data:/app/data
    environment:
      - KAFKA_SERVERS=kafka:9092
      - KEYCLOAK_URL=http://localhost:8081
      - FRONTEND_URL=http://localhost
      - BACKEND_URL=http://localhost:8082
    depends_on:
      kafka:
        condition: service_healthy
      mysql:
        condition: service_healthy
      keycloak:
        condition: service_started
    restart: on-failure
    networks:
      - cdr-network

  ms-frontend:
    build:
      context: .
      dockerfile: ./ms-frontend/Dockerfile
    container_name: ms-frontend
    ports:
      - "80:3000"  # unify to localhost:80
    volumes:
      - ./ms-frontend/src:/app/src
      - ./data:/app/data
      - ./ms-frontend/src/main/resources/static/config-docker.json:/app/src/main/resources/static/config.json
      - ./ms-frontend/src/main/resources/static/keycloak.json:/app/static/keycloak.json
    environment:
      - KEYCLOAK_URL=http://localhost:8081
      - BACKEND_URL=http://localhost:8082
      - FRONTEND_URL=http://localhost
    depends_on:
      - keycloak
    networks:
      - cdr-network


  ms-loader:
    build:
      context: .
      dockerfile: ./ms-loader/Dockerfile
    container_name: ms-loader
    environment:
      - KAFKA_SERVERS=kafka:9092
      - BACKEND_URL=http://localhost:8082
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./ms-loader/src:/app/src
      - ./data:/app/data
    networks:
      - cdr-network
    restart: on-failure

volumes:
  postgres_data:
  mysql_data:

networks:
  cdr-network:
    driver: bridge
